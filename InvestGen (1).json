{"id":"1570edd4-7b45-4465-b34c-5408a972518f","data":{"nodes":[{"id":"CustomComponent-6eIvE","type":"genericNode","position":{"x":2203.791944627295,"y":1703.8955129681897},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import subprocess\nfrom typing import Optional\n\nfrom langflow.custom import Component\nfrom langflow.inputs import StrInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\n\nclass PipInstallComponent(Component):\n    display_name: str = \"Pip Install\"\n    description: str = \"Installs a specified Python library using pip.\"\n    icon = \"download\"\n\n    inputs = [\n        StrInput(\n            name=\"library_name\",\n            display_name=\"Library Name\",\n            info=\"The name of the Python library to install.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Installation Status\", name=\"status\", method=\"install_library\"),\n    ]\n\n    def install_library(self) -> Message:\n        try:\n            # Run the pip install command\n            result = subprocess.run(\n                [\"pip\", \"install\", self.library_name],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            # Capture the output and set it as the status\n            self.status = f\"Successfully installed {self.library_name}\\n{result.stdout}\"\n        except subprocess.CalledProcessError as e:\n            # Handle the error case\n            self.status = f\"Failed to install {self.library_name}\\n{e.stderr}\"\n        \n        return Message(text=self.status)\n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"library_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"semantic-router","name":"library_name","display_name":"Library Name","advanced":false,"dynamic":false,"info":"The name of the Python library to install.","title_case":false,"type":"str"}},"description":"Installs a specified Python library using pip.","icon":"download","base_classes":["Message"],"display_name":"Pip Install","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"status","display_name":"Installation Status","method":"install_library","value":"__UNDEFINED__","cache":true}],"field_order":["library_name"],"beta":false,"edited":true,"official":false},"id":"CustomComponent-6eIvE"},"selected":false,"width":384,"height":299,"positionAbsolute":{"x":2203.791944627295,"y":1703.8955129681897},"dragging":false},{"id":"CustomComponent-CgQ3c","type":"genericNode","position":{"x":2380.2336311245044,"y":456.3797453944276},"data":{"type":"SemanticRouterComponent","node":{"template":{"_type":"Component","routes_data":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"routes_data","display_name":"Routes Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Data defining the routes.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.inputs import DataInput, MessageTextInput, DropdownInput, SecretStrInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nfrom semantic_router import Route, RouteLayer\r\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder\r\nimport os\r\n\r\nclass SemanticRouterComponent(Component):\r\n    display_name = \"Semantic Router\"\r\n    description = \"Routes input phrases based on semantic similarity to predefined routes.\"\r\n    icon = \"ðŸ”€\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"routes_data\", display_name=\"Routes Data\", info=\"Data defining the routes.\", is_list=True),\r\n        MessageTextInput(name=\"input_phrase\", display_name=\"Input Phrase\", info=\"Phrase to route.\"),\r\n        DropdownInput(name=\"model_type\", display_name=\"Model Type\", options=[\"OpenAI\", \"Cohere\"], info=\"Type of the encoder model.\"),\r\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", info=\"API key for OpenAI encoder.\", advanced=False),\r\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\", info=\"API key for Cohere encoder.\", advanced=False),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Routing Result\", name=\"routing_result\", method=\"route\"),\r\n    ]\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self.encoder = None\r\n        self.route_layer = None\r\n\r\n    def build_routes(self, routes_data):\r\n        routes = []\r\n        for route_data in routes_data:\r\n            try:\r\n                route_name = route_data['data']['route_name']\r\n                utterances = route_data['data']['utterances']\r\n                route = Route(name=route_name, utterances=utterances)\r\n                routes.append(route)\r\n            except KeyError as e:\r\n                raise ValueError(f\"Missing required field: {e}\")\r\n        return routes\r\n\r\n    def initialize_encoder(self, model_type, openai_api_key, cohere_api_key):\r\n        if model_type == \"OpenAI\":\r\n            os.environ[\"OPENAI_API_KEY\"] = openai_api_key\r\n            self.encoder = OpenAIEncoder()\r\n        elif model_type == \"Cohere\":\r\n            os.environ[\"COHERE_API_KEY\"] = cohere_api_key\r\n            self.encoder = CohereEncoder()\r\n        else:\r\n            raise ValueError(f\"Unsupported encoder model: {model_type}\")\r\n\r\n    def route(self) -> Data:\r\n        routes_data = self.routes_data  # Access routes_data directly\r\n        input_phrase = self.input_phrase\r\n        model_type = self.model_type\r\n        openai_api_key = self.openai_api_key\r\n        cohere_api_key = self.cohere_api_key\r\n\r\n        # Initialize encoder and route layer if not already done\r\n        if self.encoder is None:\r\n            self.initialize_encoder(model_type, openai_api_key, cohere_api_key)\r\n        if self.route_layer is None:\r\n            routes = self.build_routes(routes_data)\r\n            self.route_layer = RouteLayer(encoder=self.encoder, routes=routes)\r\n\r\n        # Route the input phrase\r\n        result = self.route_layer(input_phrase)\r\n\r\n        if result:\r\n            routing_result = {\"route\": result.name}\r\n        else:\r\n            routing_result = {\"route\": None}\r\n\r\n        return Data(data=routing_result)\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"cohere_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"cohere_api_key","display_name":"Cohere API Key","advanced":false,"input_types":[],"dynamic":false,"info":"API key for Cohere encoder.","title_case":false,"password":true,"type":"str"},"input_phrase":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_phrase","display_name":"Input Phrase","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Phrase to route.","title_case":false,"type":"str"},"model_type":{"trace_as_metadata":true,"options":["OpenAI","Cohere"],"required":false,"placeholder":"","show":true,"value":"OpenAI","name":"model_type","display_name":"Model Type","advanced":false,"dynamic":false,"info":"Type of the encoder model.","title_case":false,"type":"str","load_from_db":false},"openai_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"sk-proj-bIuNW1SU4jUf56iK0g8FT3BlbkFJPyGqoylY3E6AO9sNLEDZ","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"API key for OpenAI encoder.","title_case":false,"password":true,"type":"str"}},"description":"Routes input phrases based on semantic similarity to predefined routes.","icon":"ðŸ”€","base_classes":["Data"],"display_name":"SemanticRouter","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"routing_result","display_name":"Routing Result","method":"route","value":"__UNDEFINED__","cache":true}],"field_order":["routes_data","input_phrase","model_type","openai_api_key","cohere_api_key"],"beta":false,"edited":true},"id":"CustomComponent-CgQ3c","description":"Routes input phrases based on semantic similarity to predefined routes.","display_name":"SemanticRouter"},"selected":false,"width":384,"height":653,"dragging":false,"positionAbsolute":{"x":2380.2336311245044,"y":456.3797453944276}},{"id":"APIRequest-H0XAF","type":"genericNode","position":{"x":3282.4637168606055,"y":-115.75874146413543},"data":{"type":"FetchFinancialDataComponent","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"356fxFyqX3bRRFwzyLbydGXYeUbcRonY","name":"api_key","display_name":"API Key","advanced":false,"input_types":[],"dynamic":false,"info":"API key for the financial data provider.","title_case":false,"password":true,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, DropdownInput, IntInput, SecretStrInput, Output\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport time\r\nimport pandas as pd\r\n\r\nclass FetchFinancialDataComponent(Component):\r\n    display_name = \"Fetch Financial Data\"\r\n    description = \"Fetches financial data from external APIs.\"\r\n    icon = \"ðŸ“Š\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"ticker\", display_name=\"Ticker\", info=\"Stock ticker symbol.\"),\r\n        DropdownInput(name=\"endpoint\", display_name=\"Endpoint\", options=[\"balance-sheet-statement\", \"income-statement\", \"cash-flow-statement\"], info=\"API endpoint to fetch data from.\"),\r\n        IntInput(name=\"timeout\", display_name=\"Timeout\", value=5, info=\"Timeout for the API request.\"),\r\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\", info=\"API key for the financial data provider.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Fetched Data\", name=\"fetched_data\", method=\"fetch_data\"),\r\n    ]\r\n\r\n    def fetch_data(self) -> Data:\r\n        ticker = self.ticker\r\n        endpoint = self.endpoint\r\n        timeout = self.timeout\r\n        api_key = self.api_key\r\n\r\n        base_url = 'https://financialmodelingprep.com/api/v3/'\r\n        params = {'apikey': api_key}\r\n\r\n        retries = 3\r\n        for i in range(retries):\r\n            response = requests.get(f\"{base_url}{endpoint}/{ticker}?period=annual\", params=params, timeout=timeout)\r\n            if response.status_code == 200:\r\n                data = response.json()\r\n\r\n                # Print the fetched data structure for debugging\r\n                print(\"Fetched Data Structure:\", data)\r\n\r\n                if isinstance(data, dict) and 'financials' in data:\r\n                    data = data['financials']\r\n                elif isinstance(data, list):\r\n                    data = data\r\n                else:\r\n                    raise ValueError(f\"Unexpected data format: {data}\")\r\n\r\n                # Check if the required fields are present\r\n                required_fields = ['totalCurrentAssets', 'totalCurrentLiabilities']\r\n                for entry in data:\r\n                    for field in required_fields:\r\n                        if field not in entry:\r\n                            raise ValueError(f\"The fetched data does not contain '{field}'.\")\r\n\r\n                # Convert to DataFrame for further processing\r\n                df = pd.DataFrame(data)\r\n\r\n                # Logging DataFrame structure for debugging\r\n                print(\"Fetched Data Columns:\", df.columns)\r\n                print(\"Fetched Data Sample:\\n\", df.head())\r\n\r\n                return Data(data=df.to_dict(orient=\"list\"))\r\n            elif response.status_code == 429:\r\n                time.sleep(2 ** i)\r\n            else:\r\n                raise Exception(f\"Failed to fetch data: {response.status_code}\")\r\n        raise Exception(f\"Failed to fetch data after {retries} retries.\")\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"endpoint":{"trace_as_metadata":true,"options":["balance-sheet-statement","income-statement","cash-flow-statement"],"required":false,"placeholder":"","show":true,"value":"balance-sheet-statement","name":"endpoint","display_name":"Endpoint","advanced":false,"dynamic":false,"info":"API endpoint to fetch data from.","title_case":false,"type":"str","load_from_db":false},"ticker":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"TSLA","name":"ticker","display_name":"Ticker","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Stock ticker symbol.","title_case":false,"type":"str"},"timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":5,"name":"timeout","display_name":"Timeout","advanced":false,"dynamic":false,"info":"Timeout for the API request.","title_case":false,"type":"int"}},"description":"Fetches financial data from external APIs.","icon":"ðŸ“Š","base_classes":["Data"],"display_name":"Fetch Financial Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"fetched_data","display_name":"Fetched Data","method":"fetch_data","value":"__UNDEFINED__","cache":true}],"field_order":["ticker","endpoint","timeout","api_key"],"beta":false,"edited":true},"id":"APIRequest-H0XAF","description":"Fetches financial data from external APIs.","display_name":"Fetch Financial Data"},"selected":false,"width":384,"height":569,"positionAbsolute":{"x":3282.4637168606055,"y":-115.75874146413543},"dragging":false},{"id":"CustomComponent-0og6z","type":"genericNode","position":{"x":3648.7368009748297,"y":1015.098558817823},"data":{"type":"AnalyzeFinancialDataComponent","node":{"template":{"_type":"Component","financial_data_list":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"financial_data_list","display_name":"Financial Data List","advanced":false,"input_types":["Data"],"dynamic":false,"info":"List of financial data to analyze.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema import Data\r\nimport pandas as pd\r\n\r\nclass AnalyzeFinancialDataComponent(Component):\r\n    display_name = \"Analyze Financial Data\"\r\n    description = \"Analyzes financial data and calculates financial ratios.\"\r\n    icon = \"ðŸ“ˆ\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"financial_data_list\", display_name=\"Financial Data List\", info=\"List of financial data to analyze.\", is_list=True),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Analysis Results\", name=\"analysis_results\", method=\"analyze_data\"),\r\n    ]\r\n\r\n    def analyze_data(self) -> Data:\r\n        ratios_list = []\r\n        for financial_data_input in self.financial_data_list:\r\n            financial_data = pd.DataFrame(financial_data_input.data)\r\n            # Analysis logic here...\r\n            ratios = {\r\n                \"current_ratio\": financial_data[\"totalCurrentAssets\"].sum() / financial_data[\"totalCurrentLiabilities\"].sum() if financial_data[\"totalCurrentLiabilities\"].sum() != 0 else float('inf'),\r\n                # Add other ratios as needed...\r\n            }\r\n            ratios_list.append(ratios)\r\n        \r\n        # Convert list of dictionaries to a dictionary with lists for Data\r\n        result_dict = {key: [dic[key] for dic in ratios_list] for key in ratios_list[0]}\r\n        \r\n        return Data(data=result_dict)\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Analyzes financial data and calculates financial ratios.","icon":"ðŸ“ˆ","base_classes":["Data"],"display_name":"Analyze Financial Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"analysis_results","display_name":"Analysis Results","method":"analyze_data","value":"__UNDEFINED__","cache":true}],"field_order":["financial_data_list"],"beta":false,"edited":true},"id":"CustomComponent-0og6z","description":"Analyzes financial data and calculates financial ratios.","display_name":"Analyze Financial Data"},"selected":false,"width":384,"height":285,"dragging":false,"positionAbsolute":{"x":3648.7368009748297,"y":1015.098558817823}},{"id":"CustomComponent-NBnKZ","type":"genericNode","position":{"x":4213.235317980053,"y":1483.3054110561116},"data":{"type":"StoreAnalysisResultsComponent","node":{"template":{"_type":"Component","analysis_results":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"analysis_results","display_name":"Analysis Results","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Results of financial analysis.","title_case":false,"type":"other"},"config_file":{"trace_as_metadata":true,"file_path":"1570edd4-7b45-4465-b34c-5408a972518f\\db_config.json","fileTypes":["json"],"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"config_file","display_name":"Configuration File","advanced":false,"dynamic":false,"info":"Upload a JSON configuration file with database connection details.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\r\nfrom pathlib import Path\r\nfrom sqlalchemy import create_engine\r\nimport pandas as pd\r\nfrom langflow.custom import Component\r\nfrom langflow.io import DataInput, MessageTextInput, FileInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass StoreAnalysisResultsComponent(Component):\r\n    display_name = \"Store Analysis Results\"\r\n    description = \"Stores analysis results in a PostgreSQL database.\"\r\n    icon = \"ðŸ’¾\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"analysis_results\", display_name=\"Analysis Results\", info=\"Results of financial analysis.\"),\r\n        MessageTextInput(name=\"table_name\", display_name=\"Table Name\", info=\"Name of the table to store results in.\"),\r\n        FileInput(\r\n            name=\"config_file\",\r\n            display_name=\"Configuration File\",\r\n            file_types=[\"json\"],\r\n            info=\"Upload a JSON configuration file with database connection details.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Store Status\", name=\"store_status\", method=\"store_results\"),\r\n    ]\r\n\r\n    def parse_config_file(self, config_file_path):\r\n        with open(config_file_path, 'r') as file:\r\n            config = json.load(file)\r\n        return config\r\n\r\n    def store_results(self) -> Data:\r\n        if not self.analysis_results:\r\n            raise ValueError(\"No analysis results provided to store.\")\r\n\r\n        analysis_results = pd.DataFrame(self.analysis_results.data)\r\n        \r\n        table_name = self.table_name\r\n\r\n        if self.config_file:\r\n            config_file_path = self.resolve_path(self.config_file)\r\n            db_config = self.parse_config_file(config_file_path)\r\n        else:\r\n            raise ValueError(\"No configuration file provided.\")\r\n        \r\n        engine = create_engine(f'postgresql+psycopg2://{db_config[\"user\"]}:{db_config[\"password\"]}@{db_config[\"host\"]}:{db_config[\"port\"]}/{db_config[\"database\"]}')\r\n        \r\n        analysis_results.to_sql(table_name, engine, schema='public', if_exists='replace', index=False)\r\n        return Data(data={\"status\": \"Analysis results stored successfully\"})\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"table_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"table_name","display_name":"Table Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Name of the table to store results in.","title_case":false,"type":"str"}},"description":"Stores analysis results in a PostgreSQL database.","icon":"ðŸ’¾","base_classes":["Data"],"display_name":"Store Analysis Results","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"store_status","display_name":"Store Status","method":"store_results","value":"__UNDEFINED__","cache":true}],"field_order":["analysis_results","table_name","config_file"],"beta":false,"edited":true},"id":"CustomComponent-NBnKZ","description":"Stores analysis results in a PostgreSQL database.","display_name":"Store Analysis Results"},"selected":false,"width":384,"height":437,"dragging":false,"positionAbsolute":{"x":4213.235317980053,"y":1483.3054110561116}},{"id":"CustomComponent-WanUd","type":"genericNode","position":{"x":3754.4730453216475,"y":2726.45336859601},"data":{"type":"VisualizeFinancialDataComponent","node":{"template":{"_type":"Component","financial_data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"financial_data","display_name":"Financial Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Financial data to visualize.","title_case":false,"type":"other"},"chart_type":{"trace_as_metadata":true,"options":["line","candlestick"],"required":false,"placeholder":"","show":true,"value":"","name":"chart_type","display_name":"Chart Type","advanced":false,"dynamic":false,"info":"Type of chart to generate.","title_case":false,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, DropdownInput, Output\r\nfrom langflow.schema import Data\r\nfrom plotly import graph_objects as go\r\nimport pandas as pd\r\n\r\nclass VisualizeFinancialDataComponent(Component):\r\n    display_name = \"Visualize Financial Data\"\r\n    description = \"Generates visualizations for financial data using Plotly.\"\r\n    icon = \"ðŸ“Š\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"financial_data\", display_name=\"Financial Data\", info=\"Financial data to visualize.\"),\r\n        DropdownInput(name=\"chart_type\", display_name=\"Chart Type\", options=[\"line\", \"candlestick\"], info=\"Type of chart to generate.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Visualization\", name=\"visualization\", method=\"generate_visualization\"),\r\n    ]\r\n\r\n    def generate_visualization(self) -> Data:\r\n        financial_data = pd.DataFrame(self.financial_data.data)\r\n        chart_type = self.chart_type\r\n\r\n        if chart_type == \"line\":\r\n            fig = go.Figure(go.Scatter(x=financial_data.index, y=financial_data[\"close\"], mode='lines+markers'))\r\n        elif chart_type == \"candlestick\":\r\n            fig = go.Figure(data=[go.Candlestick(x=financial_data.index, open=financial_data['open'], high=financial_data['high'], low=financial_data['low'], close=financial_data['close'])])\r\n\r\n        fig.update_layout(title=\"Financial Data Visualization\")\r\n        fig_html = fig.to_html()\r\n        return Data(data={\"visualization\": fig_html})\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Generates visualizations for financial data using Plotly.","icon":"ðŸ“Š","base_classes":["Data"],"display_name":"Visualize Financial Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"visualization","display_name":"Visualization","method":"generate_visualization","value":"__UNDEFINED__","cache":true}],"field_order":["financial_data","chart_type"],"beta":false,"edited":true},"id":"CustomComponent-WanUd","description":"Generates visualizations for financial data using Plotly.","display_name":"Custom Component"},"selected":false,"width":384,"height":371,"positionAbsolute":{"x":3754.4730453216475,"y":2726.45336859601},"dragging":false},{"id":"CustomComponent-OZaCu","type":"genericNode","position":{"x":3074.410960892665,"y":3787.938485334432},"data":{"type":"StoreMessageComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from sqlalchemy import create_engine\r\nimport pandas as pd\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, MessageInput, Output\r\nfrom langflow.schema.message import Message\r\n\r\nclass StoreMessageComponent(Component):\r\n    display_name = \"Store Message\"\r\n    description = \"Stores a chat message into a PostgreSQL database and outputs stored messages.\"\r\n    icon = \"ðŸ’¾\"\r\n\r\n    inputs = [\r\n        MessageInput(name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True),\r\n        MessageTextInput(name=\"table_name\", display_name=\"Table Name\", info=\"Name of the table to store the message in.\"),\r\n        MessageTextInput(name=\"db_user\", display_name=\"DB User\", info=\"Database user name.\"),\r\n        MessageTextInput(name=\"db_password\", display_name=\"DB Password\", info=\"Database user password.\"),\r\n        MessageTextInput(name=\"db_host\", display_name=\"DB Host\", info=\"Database host.\"),\r\n        MessageTextInput(name=\"db_port\", display_name=\"DB Port\", info=\"Database port.\"),\r\n        MessageTextInput(name=\"db_name\", display_name=\"DB Name\", info=\"Database name.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\"),\r\n    ]\r\n\r\n    def store_message(self) -> Message:\r\n        message = self.message\r\n        table_name = self.table_name\r\n\r\n        db_config = {\r\n            'user': self.db_user,\r\n            'password': self.db_password,\r\n            'host': self.db_host,\r\n            'port': self.db_port,\r\n            'database': self.db_name\r\n        }\r\n\r\n        # Verify all required DB config parameters are present\r\n        required_keys = [\"user\", \"password\", \"host\", \"port\", \"database\"]\r\n        for key in required_keys:\r\n            if not db_config[key]:\r\n                raise ValueError(f\"Missing database configuration parameter: {key}\")\r\n\r\n        # Create the engine and store the data\r\n        engine = create_engine(\r\n            f'postgresql+psycopg2://{db_config[\"user\"]}:{db_config[\"password\"]}@{db_config[\"host\"]}:{db_config[\"port\"]}/{db_config[\"database\"]}'\r\n        )\r\n\r\n        # Store the message\r\n        df = pd.DataFrame([{\r\n            'message': message.text, \r\n            'sender': message.sender, \r\n            'sender_name': message.sender_name, \r\n            'session_id': message.session_id\r\n        }])\r\n        df.to_sql(table_name, engine, schema='public', if_exists='append', index=False)\r\n\r\n        # Retrieve and return stored messages\r\n        stored_messages_df = pd.read_sql(f'SELECT * FROM {table_name}', engine)\r\n        stored_messages = stored_messages_df.to_dict(orient='records')\r\n\r\n        return Message(text=str(stored_messages))\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"db_host":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"localhost","name":"db_host","display_name":"DB Host","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database host.","title_case":false,"type":"str"},"db_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langchain","name":"db_name","display_name":"DB Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database name.","title_case":false,"type":"str"},"db_password":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langchain","name":"db_password","display_name":"DB Password","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database user password.","title_case":false,"type":"str"},"db_port":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"6024","name":"db_port","display_name":"DB Port","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database port.","title_case":false,"type":"str"},"db_user":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langchain","name":"db_user","display_name":"DB User","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database user name.","title_case":false,"type":"str"},"message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"message","display_name":"Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The chat message to be stored.","title_case":false,"type":"str"},"table_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"my_docs","name":"table_name","display_name":"Table Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Name of the table to store the message in.","title_case":false,"type":"str"}},"description":"Stores a chat message into a PostgreSQL database and outputs stored messages.","icon":"ðŸ’¾","base_classes":["Message"],"display_name":"Store and Manage Messages","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"stored_messages","display_name":"Stored Messages","method":"store_message","value":"__UNDEFINED__","cache":true}],"field_order":["message","table_name","db_user","db_password","db_host","db_port","db_name"],"beta":false,"edited":true},"id":"CustomComponent-OZaCu","description":"Stores a chat message into a PostgreSQL database and outputs stored messages.","display_name":"Store and Manage Messages"},"selected":false,"width":384,"height":895,"dragging":false,"positionAbsolute":{"x":3074.410960892665,"y":3787.938485334432}},{"id":"CombineText-yBHON","type":"genericNode","position":{"x":2884.3042884008833,"y":1364.4732942512005},"data":{"type":"CombineText","node":{"template":{"_type":"Component","analysis_results_list":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"analysis_results_list","display_name":"Analysis Results List","advanced":false,"input_types":["Data"],"dynamic":false,"info":"List of analysis results to concatenate.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, MessageTextInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass CombineTextComponent(Component):\r\n    display_name = \"Combine Text\"\r\n    description = \"Concatenate text representations of financial analysis results into a single text chunk using a specified delimiter.\"\r\n    icon = \"merge\"\r\n    name = \"CombineText\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"analysis_results_list\",\r\n            display_name=\"Analysis Results List\",\r\n            info=\"List of analysis results to concatenate.\",\r\n            is_list=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"delimiter\",\r\n            display_name=\"Delimiter\",\r\n            info=\"A string used to separate the text inputs. Defaults to a whitespace.\",\r\n            value=\" \",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Combined Text\", name=\"combined_text\", method=\"combine_texts\"),\r\n    ]\r\n\r\n    def combine_texts(self) -> Data:\r\n        combined_texts = []\r\n        for analysis_results in self.analysis_results_list:\r\n            analysis_data = analysis_results.data\r\n            for result in analysis_data:\r\n                combined_texts.append(str(result))  # Convert the result to a string representation\r\n        \r\n        combined = self.delimiter.join(combined_texts)\r\n        self.status = combined\r\n        return Data(text=combined)\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":" ","name":"delimiter","display_name":"Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to separate the text inputs. Defaults to a whitespace.","title_case":false,"type":"str"}},"description":"Concatenate text representations of financial analysis results into a single text chunk using a specified delimiter.","icon":"merge","base_classes":["Data"],"display_name":"Combine Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"combined_text","display_name":"Combined Text","method":"combine_texts","value":"__UNDEFINED__","cache":true}],"field_order":["analysis_results_list","delimiter"],"beta":false,"edited":true},"id":"CombineText-yBHON","description":"Concatenate text representations of financial analysis results into a single text chunk using a specified delimiter.","display_name":"Combine Text"},"selected":false,"width":384,"height":411,"positionAbsolute":{"x":2884.3042884008833,"y":1364.4732942512005},"dragging":false},{"id":"CreateList-jjKtU","type":"genericNode","position":{"x":2866.8070448047592,"y":2008.9211538667364},"data":{"type":"CreateList","node":{"template":{"_type":"Component","combined_text":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"combined_text","display_name":"Combined Text","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The concatenated text to split into a list.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, MessageTextInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass CreateListComponent(Component):\r\n    display_name = \"Create List\"\r\n    description = \"Creates a list of texts from a single concatenated text.\"\r\n    icon = \"list\"\r\n    name = \"CreateList\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"combined_text\",\r\n            display_name=\"Combined Text\",\r\n            info=\"The concatenated text to split into a list.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"delimiter\",\r\n            display_name=\"Delimiter\",\r\n            info=\"A string used to split the concatenated text. Defaults to a whitespace.\",\r\n            value=\" \",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data List\", name=\"list\", method=\"create_list\"),\r\n    ]\r\n\r\n    def create_list(self) -> list[Data]:\r\n        texts = self.combined_text.text.split(self.delimiter)\r\n        data = [Data(text=text) for text in texts]\r\n        self.status = data\r\n        return data\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"delimiter":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":" ","name":"delimiter","display_name":"Delimiter","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A string used to split the concatenated text. Defaults to a whitespace.","title_case":false,"type":"str"}},"description":"Creates a list of texts from a single concatenated text.","icon":"list","base_classes":["Data"],"display_name":"Create List","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"list","display_name":"Data List","method":"create_list","value":"__UNDEFINED__","cache":true}],"field_order":["combined_text","delimiter"],"beta":false,"edited":true},"id":"CreateList-jjKtU","description":"Creates a list of texts from a single concatenated text.","display_name":"Create List"},"selected":false,"width":384,"height":383,"positionAbsolute":{"x":2866.8070448047592,"y":2008.9211538667364},"dragging":false},{"id":"FilterData-syvVq","type":"genericNode","position":{"x":2864.8347680499105,"y":2678.580844502417},"data":{"type":"FilterData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Data object to filter.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\n\nfrom langflow.custom import Component\nfrom langflow.io import DataInput, MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: List[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"filter_criteria":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"filter_criteria","display_name":"Filter Criteria","advanced":false,"input_types":["Message"],"dynamic":false,"info":"List of keys to filter by.","title_case":false,"type":"str"}},"description":"Filters a Data object based on a list of keys.","icon":"filter","base_classes":["Data"],"display_name":"Filter Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"filtered_data","display_name":"Filtered Data","method":"filter_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","filter_criteria"],"beta":true,"edited":false},"id":"FilterData-syvVq"},"selected":false,"width":384,"height":355,"positionAbsolute":{"x":2864.8347680499105,"y":2678.580844502417},"dragging":false},{"id":"MergeData-6lppv","type":"genericNode","position":{"x":2853.0625654099167,"y":3216.771246334925},"data":{"type":"MergeData","node":{"template":{"_type":"CustomComponent","data":{"type":"Data","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"data","display_name":"Data","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import CustomComponent\nfrom langflow.schema import Data\n\n\nclass MergeDataComponent(CustomComponent):\n    display_name = \"Merge Data\"\n    description = \"Combines multiple data sources into a single unified Data object.\"\n    beta: bool = True\n    name = \"MergeData\"\n\n    field_config = {\n        \"data\": {\"display_name\": \"Data\"},\n    }\n\n    def build(self, data: list[Data]) -> Data:\n        if not data:\n            return Data()\n        if len(data) == 1:\n            return data[0]\n        merged_data = Data()\n        for value in data:\n            if merged_data is None:\n                merged_data = value\n            else:\n                merged_data += value\n        self.status = merged_data\n        return merged_data\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Combines multiple data sources into a single unified Data object.","base_classes":["Data"],"display_name":"Merge Data","documentation":"","custom_fields":{"data":null},"output_types":["Data"],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","hidden":null,"display_name":"Data","method":null,"value":"__UNDEFINED__","cache":true}],"field_order":["data"],"beta":true,"edited":false},"id":"MergeData-6lppv"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":2853.0625654099167,"y":3216.771246334925},"dragging":false},{"id":"ParseData-SR81n","type":"genericNode","position":{"x":2592.8894375732366,"y":3613.9195586085516},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.helpers.data import data_to_text\r\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\r\nfrom langflow.schema.message import Message, Data\r\n\r\nclass ParseDataComponent(Component):\r\n    display_name = \"Parse Data\"\r\n    description = \"Convert Data into plain text following a specified template.\"\r\n    icon = \"braces\"\r\n    name = \"ParseData\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\r\n        MultilineInput(\r\n            name=\"template\",\r\n            display_name=\"Template\",\r\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\r\n            value=\"{text}\",\r\n        ),\r\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\r\n    ]\r\n\r\n    def parse_data(self) -> Message:\r\n        # Ensure data is always a list of dictionaries\r\n        data_list = self.data.data if isinstance(self.data, Data) else [self.data]\r\n\r\n        template = self.template\r\n        formatted_data = []\r\n\r\n        for item in data_list:\r\n            # Extract dictionary from Data object if necessary\r\n            item_data = item.data if isinstance(item, Data) else item\r\n\r\n            # Ensure item_data is a dictionary\r\n            if isinstance(item_data, dict):\r\n                if 'text' in item_data:\r\n                    formatted_data.append(template.format(text=item_data['text'], **item_data))\r\n                else:\r\n                    formatted_data.append(template.format(**item_data))\r\n            else:\r\n                raise TypeError(f\"Expected a dictionary but got {type(item_data)}\")\r\n\r\n        result_string = self.sep.join(formatted_data)\r\n        self.status = result_string\r\n        return Message(text=result_string)\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":true},"id":"ParseData-SR81n","description":"Convert Data into plain text following a specified template.","display_name":"Parse Data"},"selected":false,"width":384,"height":383,"positionAbsolute":{"x":2592.8894375732366,"y":3613.9195586085516},"dragging":false},{"id":"CustomComponent-rl8KQ","type":"genericNode","position":{"x":3551.657911648158,"y":1374.3942436580298},"data":{"type":"VisualizeFinancialDataComponent","node":{"template":{"_type":"Component","analysis_results":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"analysis_results","display_name":"Analysis Results","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Results of financial data analysis.","title_case":false,"type":"other"},"chart_type":{"trace_as_metadata":true,"options":["line","bar"],"required":false,"placeholder":"","show":true,"value":"bar","name":"chart_type","display_name":"Chart Type","advanced":false,"dynamic":false,"info":"Type of chart to create.","title_case":false,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.io import DataInput, DropdownInput, Output\r\nfrom langflow.schema import Data\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\n\r\nclass VisualizeFinancialDataComponent(Component):\r\n    display_name = \"Visualize Financial Data\"\r\n    description = \"Creates visualizations for financial data.\"\r\n    icon = \"ðŸ“Š\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"analysis_results\", display_name=\"Analysis Results\", info=\"Results of financial data analysis.\", is_list=True),\r\n        DropdownInput(name=\"chart_type\", display_name=\"Chart Type\", options=[\"line\", \"bar\"], value=\"line\", info=\"Type of chart to create.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Visualization\", name=\"visualization\", method=\"create_visualization\"),\r\n    ]\r\n\r\n    def create_visualization(self) -> Data:\r\n        analysis_results_list = self.analysis_results\r\n        chart_type = self.chart_type\r\n        \r\n        figures = []\r\n        for analysis_results in analysis_results_list:\r\n            analysis_data = analysis_results.data\r\n            for result in analysis_data:\r\n                df = pd.DataFrame([result])\r\n                fig = go.Figure()\r\n                \r\n                if chart_type == \"line\":\r\n                    for col in df.columns:\r\n                        fig.add_trace(go.Scatter(x=df.index, y=df[col], mode='lines+markers', name=col))\r\n                elif chart_type == \"bar\":\r\n                    for col in df.columns:\r\n                        fig.add_trace(go.Bar(x=df.index, y=df[col], name=col))\r\n                \r\n                figures.append(fig.to_html(full_html=False))\r\n        \r\n        return Data(data={\"figures\": figures})\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Creates visualizations for financial data.","icon":"ðŸ“Š","base_classes":["Data"],"display_name":"Visualize Financial Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"visualization","display_name":"Visualization","method":"create_visualization","value":"__UNDEFINED__","cache":true}],"field_order":["analysis_results","chart_type"],"beta":false,"edited":true},"id":"CustomComponent-rl8KQ","description":"Creates visualizations for financial data.","display_name":"Visualize Financial Data"},"selected":false,"width":384,"height":343,"positionAbsolute":{"x":3551.657911648158,"y":1374.3942436580298},"dragging":false},{"id":"StoreDataComponent-HoP9e","type":"genericNode","position":{"x":3897.9058227347405,"y":86.97267344353489},"data":{"type":"StoreDataComponent","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Data to store.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\r\nfrom sqlalchemy import create_engine\r\nimport pandas as pd\r\nimport json\r\nfrom langflow.custom import Component\r\nfrom langflow.io import DataInput, MessageTextInput, FileInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass StoreDataComponent(Component):\r\n    display_name = \"Store Data\"\r\n    description = \"Stores data in a PostgreSQL database.\"\r\n    icon = \"ðŸ’¾\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", info=\"Data to store.\"),\r\n        MessageTextInput(name=\"table_name\", display_name=\"Table Name\", info=\"Name of the table to store data in.\"),\r\n        MessageTextInput(name=\"db_user\", display_name=\"DB User\", info=\"Database user name.\"),\r\n        MessageTextInput(name=\"db_password\", display_name=\"DB Password\", info=\"Database user password.\"),\r\n        MessageTextInput(name=\"db_host\", display_name=\"DB Host\", info=\"Database host.\"),\r\n        MessageTextInput(name=\"db_port\", display_name=\"DB Port\", info=\"Database port.\"),\r\n        MessageTextInput(name=\"db_name\", display_name=\"DB Name\", info=\"Database name.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Store Status\", name=\"store_status\", method=\"store_data\"),\r\n    ]\r\n\r\n    def store_data(self) -> Data:\r\n        if not self.data:\r\n            raise ValueError(\"No data provided to store.\")\r\n\r\n        data = pd.DataFrame(self.data.data)\r\n        table_name = self.table_name\r\n\r\n        db_config = {\r\n            'user': self.db_user,\r\n            'password': self.db_password,\r\n            'host': self.db_host,\r\n            'port': self.db_port,\r\n            'database': self.db_name\r\n        }\r\n\r\n        # Verify all required DB config parameters are present\r\n        required_keys = [\"user\", \"password\", \"host\", \"port\", \"database\"]\r\n        for key in required_keys:\r\n            if not db_config[key]:\r\n                raise ValueError(f\"Missing database configuration parameter: {key}\")\r\n\r\n        # Create the engine and store the data\r\n        engine = create_engine(\r\n            f'postgresql+psycopg2://{db_config[\"user\"]}:{db_config[\"password\"]}@{db_config[\"host\"]}:{db_config[\"port\"]}/{db_config[\"database\"]}'\r\n        )\r\n\r\n        data.to_sql(table_name, engine, schema='public', if_exists='replace', index=False)\r\n        return Data(data={\"status\": \"Data stored successfully\"})\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"db_host":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"localhost","name":"db_host","display_name":"DB Host","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database host.","title_case":false,"type":"str"},"db_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"db_name","display_name":"DB Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database name.","title_case":false,"type":"str"},"db_password":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langchain","name":"db_password","display_name":"DB Password","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database user password.","title_case":false,"type":"str"},"db_port":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"6024","name":"db_port","display_name":"DB Port","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database port.","title_case":false,"type":"str"},"db_user":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langchain","name":"db_user","display_name":"DB User","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Database user name.","title_case":false,"type":"str"},"table_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"my_docs","name":"table_name","display_name":"Table Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Name of the table to store data in.","title_case":false,"type":"str"}},"description":"Stores data in a PostgreSQL database.","icon":"ðŸ’¾","base_classes":["Data"],"display_name":"Store Message","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"store_status","display_name":"Store Status","method":"store_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","table_name","db_user","db_password","db_host","db_port","db_name"],"beta":false,"edited":true},"id":"StoreDataComponent-HoP9e","description":"Stores data in a PostgreSQL database.","display_name":"Store Message"},"selected":true,"width":384,"height":821,"positionAbsolute":{"x":3897.9058227347405,"y":86.97267344353489},"dragging":false},{"id":"OpenAIModel-oWv8s","type":"genericNode","position":{"x":2644.9200159859806,"y":4144.727848449463},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"json_mode","display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"openai_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"sk-proj-zVyN8cMHdFDv8fSSmL25T3BlbkFJhoX26qjtUep70Uxsc69G","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":false},"id":"OpenAIModel-oWv8s"},"selected":false,"width":384,"height":623,"positionAbsolute":{"x":2644.9200159859806,"y":4144.727848449463},"dragging":false},{"id":"SQLAgent-8UfzA","type":"genericNode","position":{"x":3497.322126345267,"y":3962.6357567628033},"data":{"type":"SQLAgent","node":{"template":{"_type":"Component","llm":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"llm","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.agents import AgentExecutor\r\nfrom langchain_community.agent_toolkits import SQLDatabaseToolkit\r\nfrom langchain_community.agent_toolkits.sql.base import create_sql_agent\r\nfrom langchain_community.utilities import SQLDatabase\r\n\r\nfrom langflow.base.agents.agent import LCAgentComponent\r\nfrom langflow.inputs import MessageTextInput, HandleInput\r\n\r\nclass SQLAgentComponent(LCAgentComponent):\r\n    display_name = \"SQLAgent\"\r\n    description = \"Construct an SQL agent from an LLM and tools.\"\r\n    name = \"SQLAgent\"\r\n\r\n    inputs = LCAgentComponent._base_inputs + [\r\n        MessageTextInput(name=\"database_uri\", display_name=\"Database URI\", required=True),\r\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\r\n    ]\r\n\r\n    def build_agent(self) -> AgentExecutor:\r\n        db = SQLDatabase.from_uri(self.database_uri)\r\n        toolkit = SQLDatabaseToolkit(db=db, llm=self.llm)\r\n        agent_args = self.get_agent_kwargs()\r\n        agent_args[\"max_iterations\"] = agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\r\n        del agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\r\n        return create_sql_agent(llm=self.llm, toolkit=toolkit, **agent_args)\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"database_uri":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"postgresql+psycopg2://langchain:langchain@localhost:6024/langchain","name":"database_uri","display_name":"Database URI","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"handle_parsing_errors","display_name":"Handle Parse Errors","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"},"max_iterations":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":15,"name":"max_iterations","display_name":"Max Iterations","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"verbose","display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"}},"description":"Construct an SQL agent from an LLM and tools.","base_classes":["AgentExecutor"],"display_name":"SQLAgent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["AgentExecutor"],"selected":"AgentExecutor","name":"agent","display_name":"Agent","method":"build_agent","value":"__UNDEFINED__","cache":true}],"field_order":["handle_parsing_errors","verbose","max_iterations","database_uri","llm"],"beta":false,"edited":true},"id":"SQLAgent-8UfzA","description":"Construct an SQL agent from an LLM and tools.","display_name":"SQLAgent"},"selected":false,"width":384,"height":357,"dragging":false,"positionAbsolute":{"x":3497.322126345267,"y":3962.6357567628033}},{"id":"RunnableExecutor-3ItHe","type":"genericNode","position":{"x":3727.944319876759,"y":4765.093726800755},"data":{"type":"RunnableExecutor","node":{"template":{"_type":"Component","runnable":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"runnable","display_name":"Agent Executor","advanced":false,"input_types":["Chain","AgentExecutor","Agent","Runnable"],"dynamic":false,"info":"","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.inputs import HandleInput, MessageTextInput\r\nfrom langflow.schema.message import Message\r\nfrom langflow.template import Output\r\n\r\nclass RunnableExecComponent(Component):\r\n    description = \"Execute a runnable. It will try to guess the input and output keys.\"\r\n    display_name = \"Runnable Executor\"\r\n    name = \"RunnableExecutor\"\r\n    beta: bool = True\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input\", required=True),\r\n        HandleInput(\r\n            name=\"runnable\",\r\n            display_name=\"Agent Executor\",\r\n            input_types=[\"Chain\", \"AgentExecutor\", \"Agent\", \"Runnable\"],\r\n            required=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"input_key\",\r\n            display_name=\"Input Key\",\r\n            value=\"input\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"output_key\",\r\n            display_name=\"Output Key\",\r\n            value=\"output\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Text\",\r\n            name=\"text\",\r\n            method=\"build_executor\",\r\n        ),\r\n    ]\r\n\r\n    def get_output(self, result, input_key, output_key):\r\n        possible_output_keys = [\"answer\", \"response\", \"output\", \"result\", \"text\"]\r\n        status = \"\"\r\n        result_value = None\r\n\r\n        if output_key in result:\r\n            result_value = result.get(output_key)\r\n        elif len(result) == 2 and input_key in result:\r\n            other_key = [k for k in result if k != input_key][0]\r\n            if other_key == output_key:\r\n                result_value = result.get(output_key)\r\n            else:\r\n                status += f\"Warning: The output key is not '{output_key}'. The output key is '{other_key}'.\"\r\n                result_value = result.get(other_key)\r\n        elif len(result) == 1:\r\n            result_value = list(result.values())[0]\r\n        elif any(k in result for k in possible_output_keys):\r\n            for key in possible_output_keys:\r\n                if key in result:\r\n                    result_value = result.get(key)\r\n                    status += f\"Output key: '{key}'.\"\r\n                    break\r\n            if result_value is None:\r\n                result_value = result\r\n                status += f\"Warning: The output key is not '{output_key}'.\"\r\n        else:\r\n            result_value = result\r\n            status += f\"Warning: The output key is not '{output_key}'.\"\r\n\r\n        return result_value, status\r\n\r\n    def get_input_dict(self, runnable, input_key, input_value):\r\n        input_dict = {}\r\n        status = \"\"\r\n        if hasattr(runnable, \"input_keys\"):\r\n            if input_key in runnable.input_keys:\r\n                input_dict[input_key] = input_value\r\n            else:\r\n                input_dict = {k: input_value for k in runnable.input_keys}\r\n                status = f\"Warning: The input key is not '{input_key}'. The input key is '{runnable.input_keys}'.\"\r\n        return input_dict, status\r\n\r\n    def build_executor(self) -> Message:\r\n        input_dict, status = self.get_input_dict(self.runnable, self.input_key, self.input_value)\r\n        result = self.runnable.invoke(input_dict)\r\n        result_value, _status = self.get_output(result, self.input_key, self.output_key)\r\n        status += _status\r\n        status += f\"\\n\\nOutput: {result_value}\\n\\nRaw Output: {result}\"\r\n        self.status = status\r\n        return result_value\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_key":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"input","name":"input_key","display_name":"Input Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"output_key":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"output","name":"output_key","display_name":"Output Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Execute a runnable. It will try to guess the input and output keys.","base_classes":["Message"],"display_name":"Runnable Executor","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"build_executor","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","runnable","input_key","output_key"],"beta":true,"edited":true},"id":"RunnableExecutor-3ItHe","description":"Execute a runnable. It will try to guess the input and output keys.","display_name":"Runnable Executor"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":3727.944319876759,"y":4765.093726800755},"dragging":false},{"id":"ChatInput-LP8qK","type":"genericNode","position":{"x":2983.5225087437334,"y":4920.046490068192},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"what is the given assets of TSLA?","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"},"store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false},"id":"ChatInput-LP8qK"},"selected":false,"width":384,"height":309}],"edges":[{"source":"CustomComponent-0og6z","sourceHandle":"{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"CustomComponent-NBnKZ","targetHandle":"{Å“fieldNameÅ“:Å“analysis_resultsÅ“,Å“idÅ“:Å“CustomComponent-NBnKZÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"analysis_results","id":"CustomComponent-NBnKZ","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"AnalyzeFinancialDataComponent","id":"CustomComponent-0og6z","name":"analysis_results","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-0og6z{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-CustomComponent-NBnKZ{Å“fieldNameÅ“:Å“analysis_resultsÅ“,Å“idÅ“:Å“CustomComponent-NBnKZÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"CustomComponent-0og6z","sourceHandle":"{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"CustomComponent-rl8KQ","targetHandle":"{Å“fieldNameÅ“:Å“analysis_resultsÅ“,Å“idÅ“:Å“CustomComponent-rl8KQÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"analysis_results","id":"CustomComponent-rl8KQ","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"AnalyzeFinancialDataComponent","id":"CustomComponent-0og6z","name":"analysis_results","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-0og6z{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-CustomComponent-rl8KQ{Å“fieldNameÅ“:Å“analysis_resultsÅ“,Å“idÅ“:Å“CustomComponent-rl8KQÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"CombineText-yBHON","sourceHandle":"{Å“dataTypeÅ“:Å“CombineTextÅ“,Å“idÅ“:Å“CombineText-yBHONÅ“,Å“nameÅ“:Å“combined_textÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"CreateList-jjKtU","targetHandle":"{Å“fieldNameÅ“:Å“combined_textÅ“,Å“idÅ“:Å“CreateList-jjKtUÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"combined_text","id":"CreateList-jjKtU","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CombineText","id":"CombineText-yBHON","name":"combined_text","output_types":["Data"]}},"id":"reactflow__edge-CombineText-yBHON{Å“dataTypeÅ“:Å“CombineTextÅ“,Å“idÅ“:Å“CombineText-yBHONÅ“,Å“nameÅ“:Å“combined_textÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-CreateList-jjKtU{Å“fieldNameÅ“:Å“combined_textÅ“,Å“idÅ“:Å“CreateList-jjKtUÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"CreateList-jjKtU","sourceHandle":"{Å“dataTypeÅ“:Å“CreateListÅ“,Å“idÅ“:Å“CreateList-jjKtUÅ“,Å“nameÅ“:Å“listÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"FilterData-syvVq","targetHandle":"{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“FilterData-syvVqÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"data","id":"FilterData-syvVq","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CreateList","id":"CreateList-jjKtU","name":"list","output_types":["Data"]}},"id":"reactflow__edge-CreateList-jjKtU{Å“dataTypeÅ“:Å“CreateListÅ“,Å“idÅ“:Å“CreateList-jjKtUÅ“,Å“nameÅ“:Å“listÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-FilterData-syvVq{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“FilterData-syvVqÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"FilterData-syvVq","sourceHandle":"{Å“dataTypeÅ“:Å“FilterDataÅ“,Å“idÅ“:Å“FilterData-syvVqÅ“,Å“nameÅ“:Å“filtered_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"MergeData-6lppv","targetHandle":"{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“MergeData-6lppvÅ“,Å“inputTypesÅ“:null,Å“typeÅ“:Å“DataÅ“}","data":{"targetHandle":{"fieldName":"data","id":"MergeData-6lppv","inputTypes":null,"type":"Data"},"sourceHandle":{"dataType":"FilterData","id":"FilterData-syvVq","name":"filtered_data","output_types":["Data"]}},"id":"reactflow__edge-FilterData-syvVq{Å“dataTypeÅ“:Å“FilterDataÅ“,Å“idÅ“:Å“FilterData-syvVqÅ“,Å“nameÅ“:Å“filtered_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-MergeData-6lppv{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“MergeData-6lppvÅ“,Å“inputTypesÅ“:null,Å“typeÅ“:Å“DataÅ“}"},{"source":"MergeData-6lppv","sourceHandle":"{Å“dataTypeÅ“:Å“MergeDataÅ“,Å“idÅ“:Å“MergeData-6lppvÅ“,Å“nameÅ“:Å“dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"ParseData-SR81n","targetHandle":"{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“ParseData-SR81nÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-SR81n","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"MergeData","id":"MergeData-6lppv","name":"data","output_types":["Data"]}},"id":"reactflow__edge-MergeData-6lppv{Å“dataTypeÅ“:Å“MergeDataÅ“,Å“idÅ“:Å“MergeData-6lppvÅ“,Å“nameÅ“:Å“dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-ParseData-SR81n{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“ParseData-SR81nÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"APIRequest-H0XAF","sourceHandle":"{Å“dataTypeÅ“:Å“FetchFinancialDataComponentÅ“,Å“idÅ“:Å“APIRequest-H0XAFÅ“,Å“nameÅ“:Å“fetched_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"StoreDataComponent-HoP9e","targetHandle":"{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“StoreDataComponent-HoP9eÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"data","id":"StoreDataComponent-HoP9e","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FetchFinancialDataComponent","id":"APIRequest-H0XAF","name":"fetched_data","output_types":["Data"]}},"id":"reactflow__edge-APIRequest-H0XAF{Å“dataTypeÅ“:Å“FetchFinancialDataComponentÅ“,Å“idÅ“:Å“APIRequest-H0XAFÅ“,Å“nameÅ“:Å“fetched_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-StoreDataComponent-HoP9e{Å“fieldNameÅ“:Å“dataÅ“,Å“idÅ“:Å“StoreDataComponent-HoP9eÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"CustomComponent-0og6z","sourceHandle":"{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"CombineText-yBHON","targetHandle":"{Å“fieldNameÅ“:Å“analysis_results_listÅ“,Å“idÅ“:Å“CombineText-yBHONÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"analysis_results_list","id":"CombineText-yBHON","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"AnalyzeFinancialDataComponent","id":"CustomComponent-0og6z","name":"analysis_results","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-0og6z{Å“dataTypeÅ“:Å“AnalyzeFinancialDataComponentÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“nameÅ“:Å“analysis_resultsÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-CombineText-yBHON{Å“fieldNameÅ“:Å“analysis_results_listÅ“,Å“idÅ“:Å“CombineText-yBHONÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"APIRequest-H0XAF","sourceHandle":"{Å“dataTypeÅ“:Å“FetchFinancialDataComponentÅ“,Å“idÅ“:Å“APIRequest-H0XAFÅ“,Å“nameÅ“:Å“fetched_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}","target":"CustomComponent-0og6z","targetHandle":"{Å“fieldNameÅ“:Å“financial_data_listÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"financial_data_list","id":"CustomComponent-0og6z","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"FetchFinancialDataComponent","id":"APIRequest-H0XAF","name":"fetched_data","output_types":["Data"]}},"id":"reactflow__edge-APIRequest-H0XAF{Å“dataTypeÅ“:Å“FetchFinancialDataComponentÅ“,Å“idÅ“:Å“APIRequest-H0XAFÅ“,Å“nameÅ“:Å“fetched_dataÅ“,Å“output_typesÅ“:[Å“DataÅ“]}-CustomComponent-0og6z{Å“fieldNameÅ“:Å“financial_data_listÅ“,Å“idÅ“:Å“CustomComponent-0og6zÅ“,Å“inputTypesÅ“:[Å“DataÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"ParseData-SR81n","sourceHandle":"{Å“dataTypeÅ“:Å“ParseDataÅ“,Å“idÅ“:Å“ParseData-SR81nÅ“,Å“nameÅ“:Å“textÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}","target":"CustomComponent-OZaCu","targetHandle":"{Å“fieldNameÅ“:Å“messageÅ“,Å“idÅ“:Å“CustomComponent-OZaCuÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"message","id":"CustomComponent-OZaCu","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-SR81n","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-SR81n{Å“dataTypeÅ“:Å“ParseDataÅ“,Å“idÅ“:Å“ParseData-SR81nÅ“,Å“nameÅ“:Å“textÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}-CustomComponent-OZaCu{Å“fieldNameÅ“:Å“messageÅ“,Å“idÅ“:Å“CustomComponent-OZaCuÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"OpenAIModel-oWv8s","sourceHandle":"{Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-oWv8sÅ“,Å“nameÅ“:Å“model_outputÅ“,Å“output_typesÅ“:[Å“LanguageModelÅ“]}","target":"SQLAgent-8UfzA","targetHandle":"{Å“fieldNameÅ“:Å“llmÅ“,Å“idÅ“:Å“SQLAgent-8UfzAÅ“,Å“inputTypesÅ“:[Å“LanguageModelÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"llm","id":"SQLAgent-8UfzA","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-oWv8s","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-OpenAIModel-oWv8s{Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-oWv8sÅ“,Å“nameÅ“:Å“model_outputÅ“,Å“output_typesÅ“:[Å“LanguageModelÅ“]}-SQLAgent-8UfzA{Å“fieldNameÅ“:Å“llmÅ“,Å“idÅ“:Å“SQLAgent-8UfzAÅ“,Å“inputTypesÅ“:[Å“LanguageModelÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"SQLAgent-8UfzA","sourceHandle":"{Å“dataTypeÅ“:Å“SQLAgentÅ“,Å“idÅ“:Å“SQLAgent-8UfzAÅ“,Å“nameÅ“:Å“agentÅ“,Å“output_typesÅ“:[Å“AgentExecutorÅ“]}","target":"RunnableExecutor-3ItHe","targetHandle":"{Å“fieldNameÅ“:Å“runnableÅ“,Å“idÅ“:Å“RunnableExecutor-3ItHeÅ“,Å“inputTypesÅ“:[Å“ChainÅ“,Å“AgentExecutorÅ“,Å“AgentÅ“,Å“RunnableÅ“],Å“typeÅ“:Å“otherÅ“}","data":{"targetHandle":{"fieldName":"runnable","id":"RunnableExecutor-3ItHe","inputTypes":["Chain","AgentExecutor","Agent","Runnable"],"type":"other"},"sourceHandle":{"dataType":"SQLAgent","id":"SQLAgent-8UfzA","name":"agent","output_types":["AgentExecutor"]}},"id":"reactflow__edge-SQLAgent-8UfzA{Å“dataTypeÅ“:Å“SQLAgentÅ“,Å“idÅ“:Å“SQLAgent-8UfzAÅ“,Å“nameÅ“:Å“agentÅ“,Å“output_typesÅ“:[Å“AgentExecutorÅ“]}-RunnableExecutor-3ItHe{Å“fieldNameÅ“:Å“runnableÅ“,Å“idÅ“:Å“RunnableExecutor-3ItHeÅ“,Å“inputTypesÅ“:[Å“ChainÅ“,Å“AgentExecutorÅ“,Å“AgentÅ“,Å“RunnableÅ“],Å“typeÅ“:Å“otherÅ“}"},{"source":"ChatInput-LP8qK","sourceHandle":"{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-LP8qKÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}","target":"RunnableExecutor-3ItHe","targetHandle":"{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“RunnableExecutor-3ItHeÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"input_value","id":"RunnableExecutor-3ItHe","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-LP8qK","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-LP8qK{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-LP8qKÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}-RunnableExecutor-3ItHe{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“RunnableExecutor-3ItHeÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}"}],"viewport":{"x":-736.3373282334348,"y":-1222.353859224668,"zoom":0.3789291416276006}},"description":"Sculpting Language with Precision.","name":"InvestGen","last_tested_version":"1.0.9","endpoint_name":null,"is_component":false}